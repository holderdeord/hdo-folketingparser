#!/usr/bin/perl

use strict;
use warnings;
use utf8;

use open ':locale';

use XML::Simple;
use Data::Dumper;

my %notfound;

my %sessionmap = (
    135 => '1989-1993',
    136 => '1989-1993',
    137 => '1989-1993',

    138 => '1993-1997',
    139 => '1993-1997',
    140 => '1993-1997',
    141 => '1993-1997',

    142 => '1997-2001',
    143 => '1997-2001',
    144 => '1997-2001',
    145 => '1997-2001',

    146 => '2001-2005',
    147 => '2001-2005',
    148 => '2001-2005',
    149 => '2001-2005',

    150 => '2005-2009',
    151 => '2005-2009',
    152 => '2005-2009',
    153 => '2005-2009',

#    154 => '2009-2013',
#    155 => '2009-2013',
#    156 => '2009-2013',
#    157 => '2009-2013',
    );

my %personmap;

sub load_votes {
    my ($filename) = @_;
    open(my $fh, "<", $filename) || die "Unable to read $filename";
    my $line = <$fh>;
    close($line);
    my @votelist;
    while ($line =~ m/^[ \d]/) {
        my ($time, $votestr, $rest) =
            $line =~ m/^([ \d]{2}:\d{2}:\d{2})([MF-]+)([ \d]+.+)?$/;
        my @votes = split(//, $votestr);
        push @votelist, [$time, @votes];
        $line = $rest || '';
#        print "REST: '$rest'\n";
    }
    return @votelist;
}

sub load_voters_row {
    my ($entry) = @_;
    my ($region, $id, $name, $party);
    if (' ' eq substr($entry, 0, 1)) {
        ($id) = $entry =~ m/^\s+(\d+):/;
        if ($id) {
            $name = substr($entry, 6, 23);
            $party = substr($entry, 29, 6);
            $name =~ s/\s+$//;
            $party =~ s/\s+$//;
        }
    } else {
        $region = $entry;
        $region =~ s/\s+$//;
    }
    return ($region, $id, $name, $party);
}

sub load_voter {
    my ($arrayref, $region, $id, $name, $party) = @_;
    print STDERR "N: $name\n" unless defined $id;
    $arrayref->[$id] = {
        region => $region,
        name => $name,
        party => $party,
    };
}

sub load_voters {
    my ($filename) = @_;

    # Some files use Codepage 865, while others use ISO-8859-1.
    # The change happened session 144, between day 12 and day 17.
#    print STDERR "Loading $filename\n";
    my $fileinfo = `file "$filename"`;
    my $charset;
    if ($fileinfo =~ m/Non-ISO extended-ASCII/) {
        $charset = 'CP865';
    } else {
        $charset = 'iso8859-1';
    }

    my @voter;

    open(my $fh, "<:encoding($charset)", $filename) || die "Unable to read $filename";
    my $line;
    read $fh, $line, 2;
    my ($region1, $region2);
    my $firstline = 1;
    while (read $fh, $line, 70) {
        if ($firstline && ':' eq substr($line, 4, 1)) {
            print STDERR "Not the expected format\n";
            return;
        }
        $firstline = 0;
        my $row1 = substr $line, 0, 35;
        my $row2 = substr $line, 35, 35;

        my ($region, $id, $name, $party) = load_voters_row($row1);
        $region1 = $region if ($region);
#        print STDERR "$id $name\n" if $id;
        load_voter(\@voter, $region1, $id, $name, $party) if $id;

        ($region, $id, $name, $party) = load_voters_row($row2);
        $region2 = $region if ($region);
#        print STDERR "$id $name\n" if $id;
        load_voter(\@voter, $region2, $id, $name, $party) if $id;

    }
    close($fh);
    return @voter;
}

sub load_persons {
    my ($filename) = @_;
    my $personinfo = XMLin($filename, KeyAttr => []);
    for my $person (@{$personinfo->{person}}) {
#        print Dumper($person);
        my $first_name = $person->{first_name};
        my $last_name = $person->{last_name};
        my $period = $person->{period};
        my $perid = $person->{'stortinget-perid'};

        my @list = ($last_name, "$first_name $last_name");
        my %variants;
        my $initials = $first_name;
        while ($initials =~ s/([A-ZÆØÅ])[\w]+(\s?)/$1.$2/) {
            my $str = "$initials $last_name";
            unless (exists $variants{$str}) {
                $variants{$str} = 1;
                push @list, $str;
            }
        }
        for my $str ( @list ) {
#            print STDERR "Mapping '$str'\n";
            my $duplicate = 0;
            if (exists $personmap{$str}) {
                warn "error: Duplicate name string '$str'";
                $duplicate = $personmap{$str};
            }
            $personmap{$str} =
            {
                first_name => $first_name,
                last_name => $last_name,
                perid => $perid,
                duplicate => $duplicate,
                period => $period,
            };
        }
    }
}

sub person_period_match {
    my ($session, $partyname, $person) = @_;
    if ('ARRAY' eq ref $person->{period}) {
        for my $period (@{$person->{period}}) {
            if (($partyname eq "Uavhengig" || $partyname eq $period->{party}) &&
                $sessionmap{$session} eq $period->{content}) {
                return 1;
            }
        }
    } else {
        my $period = $person->{period};
        if (($partyname eq "Uavhengig" || $partyname eq $period->{party}) &&
            $sessionmap{$session} eq $period->{content}) {
            return 1;
        }
    }
    return 0;
}

sub find_person_from_shortname {
    my ($shortname, $session, $partyname) = @_;
    $shortname =~ s/([A-Z]\.)([A-Z])/$1 $2/g;

    # Convert S. LAST to S. Last
    $shortname =~ s/(\w+)/\u\L$1/g;

    # Changed name since then
    my %renames = (
        'A. Aune' => 'A. J. Aune',
        'A. Bjørnflaten' => 'A. M. Bjørnflaten',
        'A. C. Brustad' => 'A. C. Brustad Moe',
        'A. Enger Lahnstein' => 'A. Enger',
        'A. Kvalvik' => 'A. H. Kvalvik',
        'A. Samuelsen' => 'A. I. Samuelsen',
        'A. Skjelstad' => 'A. N. Skjelstad',
        'B. Andre' => 'B. André',
        'B. Bjørnstad' => 'B. Ø. Sveum', # Changed name
        'B. Brørby Larsen' => 'Berit Brørby',
        'B. Jørgensen' => 'Brit Hoel', # Changed name
        'E. K. Sund' => 'E. Sund', # Stortingsidene nevner ikke mellomnavnet Kristin
        'F. De Ruiter' => 'F. de Ruiter',
        'F. S. Hultgren' => 'F. S. Hultgreen',
        'H. Lydvo', 'H. Magnusson',
        'H. Magnusson Lydvo' => 'H. Magnusson',
        'I. Dag Steen' => 'Inger Dag',
        'I. M. Eriksen' => 'I. M. E. Søreide',
        'J. Fredriksen' => 'J.-H. Fredriksen',
        'J. Gåsvatn' => 'J. J. Gåsvatn',
        'K. Bekkemellem Orheim' => 'K. Bekkemellem',
        'K. Bekkemellom Orheim' => 'K. Bekkemellem', # Typo?
        'K. Bondevik' => 'Kjell Magne Bondevik', # Typo, missing middle name.  Only safe for sessions 135-153.
        'K. E. Schjøtt Pedersen' => 'K. E. Schjøtt-Pedersen',
        'K. E. Schjøtt-Pederse' => 'K. E. Schjøtt-Pedersen', # Typo?
        'L. C. Hofstad' => 'L. C. Hofstad Helleland',
        'L. Hjemdal' => 'L. H. Hjemdal',
        'L. Hofstad'    => 'L. C. Hofstad Helleland',
        'M. Aasen Agdestein' => 'M. Aasen',
        'M. G. Neergaard Aksne' => 'M. G. Neergaard Aksnes', # Typo?
        'O. H. Jørgensen' => 'O. H. Sveian', # Changed name
        'P. Henriksen' => 'P. R. Henriksen',
        'R. Kleppe' => 'Ruth Kleppe Aakvaag',
        'S. Brenden Klemetrud' => 'S. Brenden',
        'S. Ekeland' => 'S. E. Bjørkly', # Changed name
        'S. Kristoffersen Kosm' => 'S. Kristoffersen Kosmo', # Typo?
        'S. Mandt-Bartholsen' => 'S. Mandt',
        'S. Skaare Kleiven' => 'S. Skaare',
        'S. Torsvik    X' => 'Solveig Torsvik', # No idea why the X is there
        'T. Aasland Houg' => 'T. Aasland',
        'T. Kalstø Storø' => 'Torhild Kalstø',
        'T. Knutsen' => 'T. K. Knutsen',
        'T. Nordli' => 'T. Nordli Ødegård',
        'T. Riis Johansen' => 'T. Riis-Johansen',
        'T. Vedum' => 'T. S. Vedum',
        'Å. M. Schmidt' => 'Å. Michaelsen',
        );
    $shortname = $renames{$shortname} if exists $renames{$shortname};

    my $perid;
    my $first_name;

    my @possibilities = $shortname;
    my ($last_name) = $shortname =~ m/ (\S+)$/;
    push(@possibilities, $last_name) if defined $last_name;
    ($last_name) = $shortname =~ m/ (\S+ \S+)$/;
    push(@possibilities, $last_name) if $last_name;

    my $person;
    outer: for my $match (@possibilities) {
#        print STDERR "Match: '$shortname' '$match' '$personmap{$match}'\n";
        if (exists $personmap{$match} && $personmap{$match}->{duplicate}) {
            $person = $personmap{$match};
            while ($person) {
                if (person_period_match($session, $partyname, $person)) {
                    last outer;
                }
                $person = $person->{duplicate};
            }
        } elsif (exists $personmap{$match}
            && person_period_match($session, $partyname,
                                   $personmap{$match})) {
            $person = $personmap{$match};
            last outer;
        }
    }
    if ($person) {
        $perid = $person->{perid};
        $first_name = $person->{first_name};
        $last_name = $person->{last_name};
        return ($perid, $first_name, $last_name);
    }
    warn "error: Unable to find ID for '$shortname' session '$session' and party '$partyname'"
        unless exists $notfound{$shortname};
    $notfound{$shortname} = 1;
    return undef;
}

$| = 1;

load_persons('stortinget-persons-scraped.xml');

my @votefiles;
@ARGV = ('.') unless (@ARGV);
my %basepaths;
for my $dir (@ARGV) {
    opendir(DIR, $dir) || die "opendir $dir failed";
    for my $filename (readdir DIR) {
#        print STDERR "F: $filename\n";
        if (-f "$dir/$filename") {
            if ($filename =~ m/..\d+S\d+.*\.\d{3}$/) {
#                print STDERR "V: $filename\n";
                my ($basename) = $filename =~ m/^(.+)\.\d+$/;
                my $basepath = "$dir/$basename";
                $basepaths{$basepath}{votes} = "$dir/$filename";
                $basepaths{$basepath}{basename} = $basename;
            }
            if ($filename =~ m/..\d+S\d+.*\.R\d*$/) {
#                print STDERR "VV: $filename\n";
                my ($basename) = $filename =~ m/^(.+)\.R\d*$/;
                my $basepath = "$dir/$basename";
                $basepaths{$basepath}{voters} = "$dir/$filename";
                $basepaths{$basepath}{basename} = $basename;
            }
        }
    }
    closedir(DIR);
}
#print Dumper(%basenames);

for my $basepath (sort keys %basepaths ) {
#    print "Base: $basepath\n";
    my $votersfilename = $basepaths{$basepath}{voters};
    my $votefilename = $basepaths{$basepath}{votes};
    my $basename = $basepaths{$basepath}{basename};
    unless ( $votersfilename && $votefilename) {
        warn "Unable to find both files for basename $basename";
        next;
    }
    my $filelist = "'$votersfilename' '$votefilename'";
    print STDERR "Filelist: $filelist\n";

    my ($map, $id) = $basename =~ m/..(\d+)S([\d ()]+)$/;

    my ($session) = $votefilename =~ m/\.(\d{3})$/;

    my $fakeyear = 1855 + $session;
    my $date = sprintf("%4d-?-%03d", $fakeyear, $map);

    my @voter = load_voters($votersfilename);

    unless (@voter) {
        print STDERR "error: Unable to parse the voters list $votersfilename\n";
        next
    }

    my @votelist = load_votes($votefilename);

    unless (@votelist) {
        print STDERR "error: Unable to parse the votes file $votefilename\n";
        next
    }

    my $outfile = "votering-$session-$basename.xml";
    print STDERR "Writing $outfile\n";
    open(my $fh, ">:encoding(utf-8)", $outfile) ||
        die "Unable to write to $outfile";

    print $fh <<EOF;
<?xml version="1.0" encoding="UTF-8"?>
<vote-list>
EOF

    for my $votesref (@votelist) {
        my ($time, @votes) = @{$votesref};

        # There are two extra votes without person information, the
        # president and the secretary.  The voter array start on 1 and
        # not 0, leading to this strange calculation.
        if (scalar @votes != (scalar @voter-1) + 2) { # President and secretary
            printf(STDERR "error: Not the same number of votes (%d) and voters (%d)\n",
                   scalar @votes, scalar @voter-1 + 2);
#            exit 0;
        }

        print $fh <<EOF;
  <division>
    <session>$session</session>
    <when-voted>${date}T$time</when-voted>
    <map>$map</map>
    <id>$id</id>
    <description>Files: $filelist</description>
EOF

        $voter[scalar @votes - 1]->{name} = 'president';
        $voter[scalar @votes - 1]->{party} = 'unknown';
        $voter[scalar @votes    ]->{name} = 'sekretær';
        $voter[scalar @votes    ]->{party} = 'unknown';

          for my $count (0 .. scalar @votes - 1) {
              my $id = $count + 1;
              my $shortname = $voter[$id]->{name};
              my $party = $voter[$id]->{party};
              my $partyname = $party;
              if (defined $party) {
                  $partyname = {
                      'A'   => 'Arbeiderpartiet',
                      'FRP' => 'Fremskrittspartiet',
                      'UAH' => 'Uavhengig',
                      'UAV' => 'Uavhengig',
                      'H'   => 'Høyre',
                      'SP'  => 'Senterpartiet',
                      'SV'  => 'Sosialistisk Venstreparti',
                      'V'   => 'Venstre',
                      'KRF' => 'Kristelig Folkeparti',
                      'TF'  => 'Tverrpolitisk Folkevalgte (Kystpartiet)',
                      'KP'  => 'Kystpartiet',
                      'RV'  => 'Rød Valgallianse',
                      'FFF' => 'Framtid for Finnmark',
#Norges Kommunistiske Parti
#Sosialistisk Folkeparti
#Sosialistisk Valgforbund
                  }->{$party} || $party;
              } else {
                  warn "error: Missing party definition for '$party'\n" if $party;
              }

              my ($perid, $first_name, $last_name);
              if (defined $shortname) {
                  ($perid, $first_name, $last_name) =
                      find_person_from_shortname($shortname, $session, $partyname)
              }
              my $vote = {F => 'yes', M=>'no', '-'=>'absent'}->{$votes[$count]};
              if (defined $perid) {
                  print $fh "    <mpname seatid=\"$id\" perid=\"$perid\" vote=\"$vote\" party=\"$partyname\" first_name=\"$first_name\" last_name=\"$last_name\">$shortname</mpname>\n";
              } else {
                  print $fh "    <mpname seatid=\"$id\" vote=\"$vote\" party=\"$partyname\">$shortname</mpname>\n";
              }
        }
        print $fh "  </division>\n";
    }
    print $fh "</vote-list>\n";
    close $fh;
}
